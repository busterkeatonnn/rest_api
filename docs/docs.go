// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Вход для всех пользователей по логину и паролю",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Вход пользователей",
                "operationId": "auth-sign-in",
                "parameters": [
                    {
                        "description": "Логин и пароль",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/route.Credentials"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Обновление токенов",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Обновление токенов",
                "operationId": "auth-refresh",
                "responses": {}
            }
        },
        "/auth/sign_up": {
            "post": {
                "description": "Регистрация пользователя по логину и паролю",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Регистрация пользователя",
                "operationId": "auth-sign-up",
                "parameters": [
                    {
                        "description": "Логин, пароль, роль",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/route.Credentials"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/orders/": {
            "get": {
                "description": "Returns list of orders",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Получить все заказы",
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.InfoResponse"
                        }
                    }
                }
            }
        },
        "/orders/create": {
            "post": {
                "description": "Creates a orders",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Создать заказ",
                "parameters": [
                    {
                        "description": "Order details",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.InfoResponse"
                        }
                    }
                }
            }
        },
        "/orders/delete/{id}": {
            "delete": {
                "description": "Deletes a orders",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Удалить заказ",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.InfoResponse"
                        }
                    }
                }
            }
        },
        "/orders/show/{id}": {
            "get": {
                "description": "Returns one order",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Получить инфу по одному конкретному заказу",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.InfoResponse"
                        }
                    }
                }
            }
        },
        "/orders/update/{id}": {
            "put": {
                "description": "Updates a orders",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Обновить инфу по одному конкретному заказу",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Order details",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.InfoResponse"
                        }
                    }
                }
            }
        },
        "/users/": {
            "get": {
                "description": "Returns list of users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Получить инфу по всем заказам",
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.InfoResponse"
                        }
                    }
                }
            }
        },
        "/users/create": {
            "post": {
                "description": "Creates a users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Создать юзера",
                "parameters": [
                    {
                        "description": "User details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.InfoResponse"
                        }
                    }
                }
            }
        },
        "/users/delete/{id}": {
            "delete": {
                "description": "Deletes a users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Удалить юзера",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.InfoResponse"
                        }
                    }
                }
            }
        },
        "/users/show/{id}": {
            "get": {
                "description": "Returns one user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Получить инфу по одному конкретному юзеру",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.InfoResponse"
                        }
                    }
                }
            }
        },
        "/users/update/{id}": {
            "put": {
                "description": "Updates a users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Обновить инфу по одному конкретному юзеру",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.InfoResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.InfoResponse": {
            "type": "object",
            "properties": {
                "is_response_success": {
                    "type": "boolean"
                },
                "payload_response": {},
                "text_response": {
                    "type": "string"
                }
            }
        },
        "models.Order": {
            "type": "object",
            "properties": {
                "canceled": {
                    "type": "boolean"
                },
                "deliveryTime": {
                    "type": "string"
                },
                "deliveryType": {
                    "type": "string"
                },
                "orderID": {
                    "type": "integer"
                },
                "orderTime": {
                    "type": "string"
                },
                "totalPrice": {
                    "type": "number"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "hashPassword": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                },
                "userRole": {
                    "type": "string"
                }
            }
        },
        "route.Credentials": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
