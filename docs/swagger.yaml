definitions:
  dto.InfoResponse:
    properties:
      is_response_success:
        type: boolean
      payload_response: {}
      text_response:
        type: string
    type: object
  models.Order:
    properties:
      canceled:
        type: boolean
      deliveryTime:
        type: string
      deliveryType:
        type: string
      orderID:
        type: integer
      orderTime:
        type: string
      totalPrice:
        type: number
    type: object
  models.User:
    properties:
      hashPassword:
        type: string
      name:
        type: string
      userID:
        type: integer
      userRole:
        type: string
    type: object
  route.Credentials:
    properties:
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Вход для всех пользователей по логину и паролю
      operationId: auth-sign-in
      parameters:
      - description: Логин и пароль
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/route.Credentials'
      produces:
      - application/json
      responses: {}
      summary: Вход пользователей
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Обновление токенов
      operationId: auth-refresh
      produces:
      - application/json
      responses: {}
      summary: Обновление токенов
      tags:
      - auth
  /auth/sign_up:
    post:
      consumes:
      - application/json
      description: Регистрация пользователя по логину и паролю
      operationId: auth-sign-up
      parameters:
      - description: Логин, пароль, роль
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/route.Credentials'
      produces:
      - application/json
      responses: {}
      summary: Регистрация пользователя
      tags:
      - auth
  /orders/:
    get:
      description: Returns list of orders
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.InfoResponse'
      summary: Получить все заказы
      tags:
      - orders
  /orders/create:
    post:
      consumes:
      - application/json
      description: Creates a orders
      parameters:
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.InfoResponse'
      summary: Создать заказ
      tags:
      - orders
  /orders/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a orders
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.InfoResponse'
      summary: Удалить заказ
      tags:
      - orders
  /orders/show/{id}:
    get:
      description: Returns one order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.InfoResponse'
      summary: Получить инфу по одному конкретному заказу
      tags:
      - orders
  /orders/update/{id}:
    put:
      consumes:
      - application/json
      description: Updates a orders
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.InfoResponse'
      summary: Обновить инфу по одному конкретному заказу
      tags:
      - orders
  /users/:
    get:
      description: Returns list of users
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.InfoResponse'
      summary: Получить инфу по всем заказам
      tags:
      - users
  /users/create:
    post:
      consumes:
      - application/json
      description: Creates a users
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.InfoResponse'
      summary: Создать юзера
      tags:
      - users
  /users/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a users
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.InfoResponse'
      summary: Удалить юзера
      tags:
      - users
  /users/show/{id}:
    get:
      description: Returns one user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.InfoResponse'
      summary: Получить инфу по одному конкретному юзеру
      tags:
      - users
  /users/update/{id}:
    put:
      consumes:
      - application/json
      description: Updates a users
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.InfoResponse'
      summary: Обновить инфу по одному конкретному юзеру
      tags:
      - users
swagger: "2.0"
